//--------------------------------------------------------------------------------------------------
// telescope focuser control, axis instances

#include "Focuser.h"

#ifdef FOCUSER_PRESENT

#if AXIS4_DRIVER_MODEL != OFF

  #ifdef AXIS4_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis4 = {AXIS4_DRIVER_MODEL, AXIS4_DRIVER_STATUS};
    KTechMotor motor4(4, AXIS4_REVERSE, &DriverSettingsAxis4);
  #endif

  #ifdef AXIS4_SERVO_PRESENT
    ServoControl servoControlAxis4;

    #if AXIS4_ENCODER == AB
      Quadrature encAxis4(4, AXIS4_ENCODER_A_PIN, AXIS4_ENCODER_B_PIN);
    #elif AXIS4_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis4(4, AXIS4_ENCODER_A_PIN, AXIS4_ENCODER_B_PIN);
    #elif AXIS4_ENCODER == CW_CCW
      CwCcw encAxis4(4, AXIS4_ENCODER_A_PIN, AXIS4_ENCODER_B_PIN);
    #elif AXIS4_ENCODER == PULSE_DIR
      PulseDir encAxis4(4, AXIS4_ENCODER_A_PIN, AXIS4_ENCODER_B_PIN);
    #elif AXIS4_ENCODER == PULSE_ONLY
      PulseOnly encAxis4(4, AXIS4_ENCODER_A_PIN, &servoControlAxis4.directionHint);
    #elif AXIS4_ENCODER == VIRTUAL
      VirtualEnc encAxis4(4);
    #elif AXIS4_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis4(4);
    #endif

    #if AXIS4_SERVO_FEEDBACK == PID
      Pid feedbackAxis4(AXIS4_PID_P, AXIS4_PID_I, AXIS4_PID_D);
    #elif AXIS4_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis4(AXIS4_PID_P, AXIS4_PID_I, AXIS4_PID_D, AXIS4_PID_P_GOTO, AXIS4_PID_I_GOTO, AXIS4_PID_D_GOTO, AXIS4_PID_SENSITIVITY);
    #endif

    #if AXIS4_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis4(AXIS4_SERVO_FLTR_MEAS_U, AXIS4_SERVO_FLTR_VARIANCE);
    #elif AXIS4_SERVO_FLTR == ROLLING
      RollingFilter filterAxis4(AXIS4_SERVO_FLTR_WSIZE);
    #elif AXIS4_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis4(AXIS4_SERVO_FLTR_WSIZE);
    #elif AXIS4_SERVO_FLTR == OFF
      Filter filterAxis4;
    #endif

    const ServoPins DriverPinsAxis4 = {AXIS4_SERVO_PH1_PIN, AXIS4_SERVO_PH1_STATE, AXIS4_SERVO_PH2_PIN, AXIS4_SERVO_PH2_STATE, AXIS4_ENABLE_PIN, AXIS4_ENABLE_STATE, AXIS4_M0_PIN, AXIS4_M1_PIN, AXIS1_M2_PIN, AXIS4_M3_PIN, AXIS4_FAULT_PIN};
    const ServoSettings DriverSettingsAxis4 = {AXIS4_DRIVER_MODEL, AXIS4_DRIVER_STATUS, AXIS4_SERVO_VELOCITY_MAX, AXIS4_SERVO_ACCELERATION};

    #if AXIS4_DRIVER_MODEL == SERVO_EE
      ServoEE driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_SERVO_DC_PWR_MIN, AXIS4_SERVO_DC_PWR_MAX);
    #elif AXIS4_DRIVER_MODEL == SERVO_PE
      ServoPE driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_SERVO_DC_PWR_MIN, AXIS4_SERVO_DC_PWR_MAX);
    #elif AXIS4_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_SERVO_DC_PWR_MIN, AXIS4_SERVO_DC_PWR_MAX);
    #elif AXIS4_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_SERVO_DC_PWR_MIN, AXIS4_SERVO_DC_PWR_MAX);
    #elif AXIS4_DRIVER_MODEL == SERVO_TMC2209
      ServoTmc2209 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_MOTOR_STEPS_PER_MICRON/AXIS4_STEPS_PER_MICRON, AXIS4_DRIVER_MICROSTEPS, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_DECAY, AXIS4_DRIVER_DECAY_GOTO);
    #elif AXIS4_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_MOTOR_STEPS_PER_MICRON/AXIS4_STEPS_PER_MICRON, AXIS4_DRIVER_MICROSTEPS, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_DECAY, AXIS4_DRIVER_DECAY_GOTO);
    #elif AXIS4_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver4(4, &DriverPinsAxis4, AXIS4_MOTOR_STEPS_PER_MICRON/AXIS4_STEPS_PER_MICRON);
    #endif

    ServoMotor motor4(4, AXIS4_REVERSE, ((ServoDriver*)&driver4), &filterAxis4, &encAxis4, AXIS4_ENCODER_ORIGIN, AXIS4_ENCODER_REVERSE == ON, &feedbackAxis4, &servoControlAxis4, AXIS4_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS4_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis4 = {AXIS4_M0_PIN, AXIS4_M1_PIN, AXIS4_M2_PIN, AXIS4_M2_ON_STATE, AXIS4_M3_PIN, AXIS4_DECAY_PIN, AXIS4_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis4 = {AXIS4_DRIVER_MODEL, AXIS4_DRIVER_STATUS, AXIS4_DRIVER_MICROSTEPS, AXIS4_DRIVER_MICROSTEPS_GOTO, AXIS4_DRIVER_DECAY, AXIS4_DRIVER_DECAY_GOTO};
    #if AXIS4_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS4_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4);
    #elif AXIS4_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC2209 || AXIS4_DRIVER_MODEL == TMC2226
      StepDirTmc2209 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #elif AXIS4_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver4(4, &DriverPinsAxis4, &DriverSettingsAxis4, AXIS4_DRIVER_IHOLD, AXIS4_DRIVER_IRUN, AXIS4_DRIVER_IGOTO, AXIS4_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis4 = {AXIS4_STEP_PIN, AXIS4_STEP_STATE, AXIS4_DIR_PIN, AXIS4_ENABLE_PIN, AXIS4_ENABLE_STATE};
    StepDirMotor motor4(4, AXIS4_REVERSE, &StepDirPinsAxis4, ((StepDirDriver*)&driver4));
  #endif

  const AxisPins PinsAxis4 = {AXIS4_SENSE_LIMIT_MIN_PIN, AXIS4_SENSE_HOME_PIN, AXIS4_SENSE_LIMIT_MAX_PIN, {AXIS4_SENSE_HOME, AXIS4_SENSE_HOME_INIT, AXIS4_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS4_SENSE_LIMIT_MIN, AXIS4_SENSE_LIMIT_MAX, AXIS4_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis4 = {AXIS4_STEPS_PER_MICRON, {AXIS4_LIMIT_MIN*1000.0F, AXIS4_LIMIT_MAX*1000.0F}, AXIS4_BACKLASH_RATE};
  Axis axis4(4, &PinsAxis4, &SettingsAxis4, AXIS_MEASURE_MICRONS);
#endif

#if AXIS5_DRIVER_MODEL != OFF

  #ifdef AXIS5_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis5 = {AXIS5_DRIVER_MODEL, AXIS5_DRIVER_STATUS};
    KTechMotor motor5(5, AXIS5_REVERSE, &DriverSettingsAxis5);
  #endif

  #ifdef AXIS5_SERVO_PRESENT
    ServoControl servoControlAxis5;

    #if AXIS5_ENCODER == AB
      Quadrature encAxis5(5, AXIS5_ENCODER_A_PIN, AXIS5_ENCODER_B_PIN);
    #elif AXIS5_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis5(5, AXIS5_ENCODER_A_PIN, AXIS5_ENCODER_B_PIN);
    #elif AXIS5_ENCODER == CW_CCW
      CwCcw encAxis5(5, AXIS5_ENCODER_A_PIN, AXIS5_ENCODER_B_PIN);
    #elif AXIS5_ENCODER == PULSE_DIR
      PulseDir encAxis5(5, AXIS5_ENCODER_A_PIN, AXIS5_ENCODER_B_PIN);
    #elif AXIS5_ENCODER == PULSE_ONLY
      PulseOnly encAxis5(5, AXIS5_ENCODER_A_PIN, &servoControlAxis5.directionHint);
    #elif AXIS5_ENCODER == VIRTUAL
      VirtualEnc encAxis5(5);
    #elif AXIS5_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis5(5);
    #endif

    #if AXIS5_SERVO_FEEDBACK == PID
      Pid feedbackAxis5(AXIS5_PID_P, AXIS5_PID_I, AXIS5_PID_D);
    #elif AXIS5_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis5(AXIS5_PID_P, AXIS5_PID_I, AXIS5_PID_D, AXIS5_PID_P_GOTO, AXIS5_PID_I_GOTO, AXIS5_PID_D_GOTO, AXIS5_PID_SENSITIVITY);
    #endif

    #if AXIS5_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis5(AXIS5_SERVO_FLTR_MEAS_U, AXIS5_SERVO_FLTR_VARIANCE);
    #elif AXIS5_SERVO_FLTR == ROLLING
      RollingFilter filterAxis5(AXIS5_SERVO_FLTR_WSIZE);
    #elif AXIS5_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis5(AXIS5_SERVO_FLTR_WSIZE);
    #elif AXIS5_SERVO_FLTR == OFF
      Filter filterAxis5;
    #endif

    const ServoPins DriverPinsAxis5 = {AXIS5_SERVO_PH1_PIN, AXIS5_SERVO_PH1_STATE, AXIS5_SERVO_PH2_PIN, AXIS5_SERVO_PH2_STATE, AXIS5_ENABLE_PIN, AXIS5_ENABLE_STATE, AXIS5_M0_PIN, AXIS4_M1_PIN, AXIS1_M2_PIN, AXIS4_M3_PIN, AXIS4_FAULT_PIN};
    const ServoSettings DriverSettingsAxis5 = {AXIS5_DRIVER_MODEL, AXIS5_DRIVER_STATUS, AXIS5_SERVO_VELOCITY_MAX, AXIS5_SERVO_ACCELERATION};

    #if AXIS5_DRIVER_MODEL == SERVO_EE
      ServoEE driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_SERVO_DC_PWR_MIN, AXIS5_SERVO_DC_PWR_MAX);
    #elif AXIS5_DRIVER_MODEL == SERVO_PE
      ServoPE driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_SERVO_DC_PWR_MIN, AXIS5_SERVO_DC_PWR_MAX);
    #elif AXIS5_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_SERVO_DC_PWR_MIN, AXIS5_SERVO_DC_PWR_MAX);
    #elif AXIS5_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_SERVO_DC_PWR_MIN, AXIS5_SERVO_DC_PWR_MAX);
    #elif AXIS5_DRIVER_MODEL == SERVO_TMC2209
      ServoTmc2209 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_MOTOR_STEPS_PER_MICRON/AXIS5_STEPS_PER_MICRON, AXIS5_DRIVER_MICROSTEPS, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_DECAY, AXIS5_DRIVER_DECAY_GOTO);
    #elif AXIS5_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_MOTOR_STEPS_PER_MICRON/AXIS5_STEPS_PER_MICRON, AXIS5_DRIVER_MICROSTEPS, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_DECAY, AXIS5_DRIVER_DECAY_GOTO);
    #elif AXIS5_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver5(5, &DriverSettingsAxis5, AXIS5_MOTOR_STEPS_PER_MICRON/AXIS5_STEPS_PER_MICRON);
    #endif

    ServoMotor motor5(5, AXIS5_REVERSE, ((ServoDriver*)&driver5), &filterAxis5, &encAxis5, AXIS5_ENCODER_ORIGIN, AXIS5_ENCODER_REVERSE == ON, &feedbackAxis5, &servoControlAxis5, AXIS5_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS5_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis5 = {AXIS5_M0_PIN, AXIS5_M1_PIN, AXIS5_M2_PIN, AXIS5_M2_ON_STATE, AXIS5_M3_PIN, AXIS5_DECAY_PIN, AXIS5_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis5 = {AXIS5_DRIVER_MODEL, AXIS5_DRIVER_STATUS, AXIS5_DRIVER_MICROSTEPS, AXIS5_DRIVER_MICROSTEPS_GOTO, AXIS5_DRIVER_DECAY, AXIS5_DRIVER_DECAY_GOTO};
    #if AXIS5_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS5_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5);
    #elif AXIS5_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC2209 || AXIS5_DRIVER_MODEL == TMC2226
      StepDirTmc2209 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #elif AXIS5_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver5(5, &DriverPinsAxis5, &DriverSettingsAxis5, AXIS5_DRIVER_IHOLD, AXIS5_DRIVER_IRUN, AXIS5_DRIVER_IGOTO, AXIS5_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis5 = {AXIS5_STEP_PIN, AXIS5_STEP_STATE, AXIS5_DIR_PIN, AXIS5_ENABLE_PIN, AXIS5_ENABLE_STATE};
    StepDirMotor motor5(5, AXIS5_REVERSE, &StepDirPinsAxis5, ((StepDirDriver*)&driver5));
  #endif

  const AxisPins PinsAxis5 = {AXIS5_SENSE_LIMIT_MIN_PIN, AXIS5_SENSE_HOME_PIN, AXIS5_SENSE_LIMIT_MAX_PIN, {AXIS5_SENSE_HOME, AXIS5_SENSE_HOME_INIT, AXIS5_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS5_SENSE_LIMIT_MIN, AXIS5_SENSE_LIMIT_MAX, AXIS5_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis5 = {AXIS5_STEPS_PER_MICRON, {AXIS5_LIMIT_MIN*1000.0F, AXIS5_LIMIT_MAX*1000.0F}, AXIS5_BACKLASH_RATE};
  Axis axis5(5, &PinsAxis5, &SettingsAxis5, AXIS_MEASURE_MICRONS);
#endif

#if AXIS6_DRIVER_MODEL != OFF

  #ifdef AXIS6_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis6 = {AXIS6_DRIVER_MODEL, AXIS6_DRIVER_STATUS};
    KTechMotor motor6(6, AXIS6_REVERSE, &DriverSettingsAxis6);
  #endif

  #ifdef AXIS6_SERVO_PRESENT
    ServoControl servoControlAxis6;

    #if AXIS6_ENCODER == AB
      Quadrature encAxis6(6, AXIS6_ENCODER_A_PIN, AXIS6_ENCODER_B_PIN);
    #elif AXIS6_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis6(6, AXIS6_ENCODER_A_PIN, AXIS6_ENCODER_B_PIN);
    #elif AXIS6_ENCODER == CW_CCW
      CwCcw encAxis6(6, AXIS6_ENCODER_A_PIN, AXIS6_ENCODER_B_PIN);
    #elif AXIS6_ENCODER == PULSE_DIR
      PulseDir encAxis6(6, AXIS6_ENCODER_A_PIN, AXIS6_ENCODER_B_PIN);
    #elif AXIS6_ENCODER == PULSE_ONLY
      PulseOnly encAxis6(6, AXIS6_ENCODER_A_PIN, &servoControlAxis6.directionHint);
    #elif AXIS6_ENCODER == VIRTUAL
      VirtualEnc encAxis6(6);
    #elif AXIS6_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis6(6);
    #endif

    #if AXIS6_SERVO_FEEDBACK == PID
      Pid feedbackAxis6(AXIS6_PID_P, AXIS6_PID_I, AXIS6_PID_D);
    #elif AXIS6_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis6(AXIS6_PID_P, AXIS6_PID_I, AXIS6_PID_D, AXIS6_PID_P_GOTO, AXIS6_PID_I_GOTO, AXIS6_PID_D_GOTO, AXIS6_PID_SENSITIVITY);
    #endif

    #if AXIS6_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis6(AXIS6_SERVO_FLTR_MEAS_U, AXIS6_SERVO_FLTR_VARIANCE);
    #elif AXIS6_SERVO_FLTR == ROLLING
      RollingFilter filterAxis6(AXIS6_SERVO_FLTR_WSIZE);
    #elif AXIS6_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis6(AXIS6_SERVO_FLTR_WSIZE);
    #elif AXIS6_SERVO_FLTR == OFF
      Filter filterAxis6;
    #endif

    const ServoPins DriverPinsAxis6 = {AXIS6_SERVO_PH1_PIN, AXIS6_SERVO_PH1_STATE, AXIS6_SERVO_PH2_PIN, AXIS6_SERVO_PH2_STATE, AXIS6_ENABLE_PIN, AXIS6_ENABLE_STATE, AXIS6_M0_PIN, AXIS6_M1_PIN, AXIS1_M2_PIN, AXIS6_M3_PIN, AXIS6_FAULT_PIN};
    const ServoSettings DriverSettingsAxis6 = {AXIS6_DRIVER_MODEL, AXIS6_DRIVER_STATUS, AXIS6_SERVO_VELOCITY_MAX, AXIS6_SERVO_ACCELERATION};

    #if AXIS6_DRIVER_MODEL == SERVO_EE
      ServoEE driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_SERVO_DC_PWR_MIN, AXIS6_SERVO_DC_PWR_MAX);
    #elif AXIS6_DRIVER_MODEL == SERVO_PE
      ServoPE driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_SERVO_DC_PWR_MIN, AXIS6_SERVO_DC_PWR_MAX);
    #elif AXIS6_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver6(6, &DriverPinsAxis5, &DriverSettingsAxis6, AXIS6_SERVO_DC_PWR_MIN, AXIS6_SERVO_DC_PWR_MAX);
    #elif AXIS6_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver6(6, &DriverPinsAxis5, &DriverSettingsAxis6, AXIS6_SERVO_DC_PWR_MIN, AXIS6_SERVO_DC_PWR_MAX);
    #elif AXIS6_DRIVER_MODEL == SERVO_TMC2209
      ServoTmc2209 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_MOTOR_STEPS_PER_MICRON/AXIS6_STEPS_PER_MICRON, AXIS6_DRIVER_MICROSTEPS, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_DECAY, AXIS6_DRIVER_DECAY_GOTO);
    #elif AXIS6_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_MOTOR_STEPS_PER_MICRON/AXIS6_STEPS_PER_MICRON, AXIS6_DRIVER_MICROSTEPS, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_DECAY, AXIS6_DRIVER_DECAY_GOTO);
    #elif AXIS6_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver6(6, &DriverSettingsAxis6, AXIS6_MOTOR_STEPS_PER_MICRON/AXIS6_STEPS_PER_MICRON);
    #endif

    ServoMotor motor6(6, AXIS6_REVERSE, ((ServoDriver*)&driver6), &filterAxis6, &encAxis6, AXIS6_ENCODER_ORIGIN, AXIS6_ENCODER_REVERSE == ON, &feedbackAxis6, &servoControlAxis6, AXIS6_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS6_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis6 = {AXIS6_M0_PIN, AXIS6_M1_PIN, AXIS6_M2_PIN, AXIS6_M2_ON_STATE, AXIS6_M3_PIN, AXIS6_DECAY_PIN, AXIS6_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis6 = {AXIS6_DRIVER_MODEL, AXIS6_DRIVER_STATUS, AXIS6_DRIVER_MICROSTEPS, AXIS6_DRIVER_MICROSTEPS_GOTO, AXIS6_DRIVER_DECAY, AXIS6_DRIVER_DECAY_GOTO};
    #if AXIS6_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS6_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6);
    #elif AXIS6_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC2209 || AXIS6_DRIVER_MODEL == TMC2226
      StepDirTmc2209 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #elif AXIS6_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver6(6, &DriverPinsAxis6, &DriverSettingsAxis6, AXIS6_DRIVER_IHOLD, AXIS6_DRIVER_IRUN, AXIS6_DRIVER_IGOTO, AXIS6_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis6 = {AXIS6_STEP_PIN, AXIS6_STEP_STATE, AXIS6_DIR_PIN, AXIS6_ENABLE_PIN, AXIS6_ENABLE_STATE};
    StepDirMotor motor6(6, AXIS6_REVERSE, &StepDirPinsAxis6, ((StepDirDriver*)&driver6));
  #endif

  const AxisPins PinsAxis6 = {AXIS6_SENSE_LIMIT_MIN_PIN, AXIS6_SENSE_HOME_PIN, AXIS6_SENSE_LIMIT_MAX_PIN, {AXIS6_SENSE_HOME, AXIS6_SENSE_HOME_INIT, AXIS6_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS6_SENSE_LIMIT_MIN, AXIS6_SENSE_LIMIT_MAX, AXIS6_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis6 = {AXIS6_STEPS_PER_MICRON, {AXIS6_LIMIT_MIN*1000.0F, AXIS6_LIMIT_MAX*1000.0F}, AXIS6_BACKLASH_RATE};
  Axis axis6(6, &PinsAxis6, &SettingsAxis6, AXIS_MEASURE_MICRONS);
#endif

#if AXIS7_DRIVER_MODEL != OFF

  #ifdef AXIS7_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis7 = {AXIS7_DRIVER_MODEL, AXIS7_DRIVER_STATUS};
    KTechMotor motor7(7, AXIS7_REVERSE, &DriverSettingsAxis7);
  #endif

  #ifdef AXIS7_SERVO_PRESENT
    ServoControl servoControlAxis7;

    #if AXIS7_ENCODER == AB
      Quadrature encAxis7(7, AXIS7_ENCODER_A_PIN, AXIS7_ENCODER_B_PIN);
    #elif AXIS7_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis7(7, AXIS7_ENCODER_A_PIN, AXIS7_ENCODER_B_PIN);
    #elif AXIS7_ENCODER == CW_CCW
      CwCcw encAxis7(7, AXIS7_ENCODER_A_PIN, AXIS7_ENCODER_B_PIN);
    #elif AXIS7_ENCODER == PULSE_DIR
      PulseDir encAxis7(7, AXIS7_ENCODER_A_PIN, AXIS7_ENCODER_B_PIN);
    #elif AXIS7_ENCODER == PULSE_ONLY
      PulseOnly encAxis7(7, AXIS7_ENCODER_A_PIN, &servoControlAxis7.directionHint);
    #elif AXIS7_ENCODER == VIRTUAL
      VirtualEnc encAxis7(7);
    #elif AXIS7_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis7(7);
    #endif

    #if AXIS7_SERVO_FEEDBACK == PID
      Pid feedbackAxis7(AXIS7_PID_P, AXIS7_PID_I, AXIS7_PID_D);
    #elif AXIS7_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis7(AXIS7_PID_P, AXIS7_PID_I, AXIS7_PID_D, AXIS7_PID_P_GOTO, AXIS7_PID_I_GOTO, AXIS7_PID_D_GOTO, AXIS7_PID_SENSITIVITY);
    #endif

    #if AXIS7_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis7(AXIS7_SERVO_FLTR_MEAS_U, AXIS7_SERVO_FLTR_VARIANCE);
    #elif AXIS7_SERVO_FLTR == ROLLING
      RollingFilter filterAxis7(AXIS7_SERVO_FLTR_WSIZE);
    #elif AXIS7_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis7(AXIS7_SERVO_FLTR_WSIZE);
    #elif AXIS7_SERVO_FLTR == OFF
      Filter filterAxis7;
    #endif

    const ServoPins DriverPinsAxis7 = {AXIS7_SERVO_PH1_PIN, AXIS7_SERVO_PH1_STATE, AXIS7_SERVO_PH2_PIN, AXIS7_SERVO_PH2_STATE, AXIS7_ENABLE_PIN, AXIS7_ENABLE_STATE, AXIS7_M0_PIN, AXIS7_M1_PIN, AXIS1_M2_PIN, AXIS7_M3_PIN, AXIS7_FAULT_PIN};
    const ServoSettings DriverSettingsAxis7 = {AXIS7_DRIVER_MODEL, AXIS7_DRIVER_STATUS, AXIS7_SERVO_VELOCITY_MAX, AXIS7_SERVO_ACCELERATION};

    #if AXIS7_DRIVER_MODEL == SERVO_EE
      ServoEE driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_SERVO_DC_PWR_MIN, AXIS7_SERVO_DC_PWR_MAX);
    #elif AXIS7_DRIVER_MODEL == SERVO_PE
      ServoPE driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_SERVO_DC_PWR_MIN, AXIS7_SERVO_DC_PWR_MAX);
    #elif AXIS7_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_SERVO_DC_PWR_MIN, AXIS7_SERVO_DC_PWR_MAX);
    #elif AXIS7_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_SERVO_DC_PWR_MIN, AXIS7_SERVO_DC_PWR_MAX);
    #elif AXIS7_DRIVER_MODEL == SERVO_TMC2209
      ServoTmc2209 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_MOTOR_STEPS_PER_MICRON/AXIS7_STEPS_PER_MICRON, AXIS7_DRIVER_MICROSTEPS, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_DECAY, AXIS7_DRIVER_DECAY_GOTO);
    #elif AXIS7_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_MOTOR_STEPS_PER_MICRON/AXIS7_STEPS_PER_MICRON, AXIS7_DRIVER_MICROSTEPS, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_DECAY, AXIS7_DRIVER_DECAY_GOTO);
    #elif AXIS7_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver7(7, &DriverSettingsAxis7, AXIS7_MOTOR_STEPS_PER_MICRON/AXIS7_STEPS_PER_MICRON);
    #endif

    ServoMotor motor7(7, AXIS7_REVERSE, ((ServoDriver*)&driver7), &filterAxis7, &encAxis7, AXIS7_ENCODER_ORIGIN, AXIS7_ENCODER_REVERSE == ON, &feedbackAxis7, &servoControlAxis7, AXIS7_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS7_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis7 = {AXIS7_M0_PIN, AXIS7_M1_PIN, AXIS7_M2_PIN, AXIS7_M2_ON_STATE, AXIS7_M3_PIN, AXIS7_DECAY_PIN, AXIS7_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis7 = {AXIS7_DRIVER_MODEL, AXIS7_DRIVER_STATUS, AXIS7_DRIVER_MICROSTEPS, AXIS7_DRIVER_MICROSTEPS_GOTO, AXIS7_DRIVER_DECAY, AXIS7_DRIVER_DECAY_GOTO};
    #if AXIS7_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS7_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7);
    #elif AXIS7_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC2209 || AXIS7_DRIVER_MODEL == TMC2226
      StepDirTmc2209 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #elif AXIS7_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver7(7, &DriverPinsAxis7, &DriverSettingsAxis7, AXIS7_DRIVER_IHOLD, AXIS7_DRIVER_IRUN, AXIS7_DRIVER_IGOTO, AXIS7_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis7 = {AXIS7_STEP_PIN, AXIS7_STEP_STATE, AXIS7_DIR_PIN, AXIS7_ENABLE_PIN, AXIS7_ENABLE_STATE};
    StepDirMotor motor7(7, AXIS7_REVERSE, &StepDirPinsAxis7, ((StepDirDriver*)&driver7));
  #endif

  const AxisPins PinsAxis7 = {AXIS7_SENSE_LIMIT_MIN_PIN, AXIS7_SENSE_HOME_PIN, AXIS7_SENSE_LIMIT_MAX_PIN, {AXIS7_SENSE_HOME, AXIS7_SENSE_HOME_INIT, AXIS7_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS7_SENSE_LIMIT_MIN, AXIS7_SENSE_LIMIT_MAX, AXIS7_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis7 = {AXIS7_STEPS_PER_MICRON, {AXIS7_LIMIT_MIN*1000.0F, AXIS7_LIMIT_MAX*1000.0F}, AXIS7_BACKLASH_RATE};
  Axis axis7(7, &PinsAxis7, &SettingsAxis7, AXIS_MEASURE_MICRONS);
#endif

#if AXIS8_DRIVER_MODEL != OFF

  #ifdef AXIS8_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis8 = {AXIS8_DRIVER_MODEL, AXIS8_DRIVER_STATUS};
    KTechMotor motor8(8, AXIS8_REVERSE, &DriverSettingsAxis8);
  #endif

  #ifdef AXIS8_SERVO_PRESENT
    ServoControl servoControlAxis8;

    #if AXIS8_ENCODER == AB
      Quadrature encAxis8(8, AXIS8_ENCODER_A_PIN, AXIS8_ENCODER_B_PIN);
    #elif AXIS8_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis8(8, AXIS8_ENCODER_A_PIN, AXIS8_ENCODER_B_PIN);
    #elif AXIS8_ENCODER == CW_CCW
      CwCcw encAxis8(8, AXIS8_ENCODER_A_PIN, AXIS8_ENCODER_B_PIN);
    #elif AXIS8_ENCODER == PULSE_DIR
      PulseDir encAxis8(8, AXIS8_ENCODER_A_PIN, AXIS8_ENCODER_B_PIN);
    #elif AXIS8_ENCODER == PULSE_ONLY
      PulseOnly encAxis8(8, AXIS8_ENCODER_A_PIN, &servoControlAxis8.directionHint);
    #elif AXIS8_ENCODER == VIRTUAL
      VirtualEnc encAxis8(8);
    #elif AXIS8_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis8(8);
    #endif

    #if AXIS8_SERVO_FEEDBACK == PID
      Pid feedbackAxis8(AXIS8_PID_P, AXIS8_PID_I, AXIS8_PID_D);
    #elif AXIS8_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis8(AXIS8_PID_P, AXIS8_PID_I, AXIS8_PID_D, AXIS8_PID_P_GOTO, AXIS8_PID_I_GOTO, AXIS8_PID_D_GOTO, AXIS8_PID_SENSITIVITY);
    #endif

    #if AXIS8_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis8(AXIS8_SERVO_FLTR_MEAS_U, AXIS8_SERVO_FLTR_VARIANCE);
    #elif AXIS8_SERVO_FLTR == ROLLING
      RollingFilter filterAxis8(AXIS8_SERVO_FLTR_WSIZE);
    #elif AXIS8_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis8(AXIS8_SERVO_FLTR_WSIZE);
    #elif AXIS8_SERVO_FLTR == OFF
      Filter filterAxis8;
    #endif

    const ServoPins DriverPinsAxis8 = {AXIS8_SERVO_PH1_PIN, AXIS8_SERVO_PH1_STATE, AXIS8_SERVO_PH2_PIN, AXIS8_SERVO_PH2_STATE, AXIS8_ENABLE_PIN, AXIS8_ENABLE_STATE, AXIS8_M0_PIN, AXIS8_M1_PIN, AXIS1_M2_PIN, AXIS8_M3_PIN, AXIS8_FAULT_PIN};
    const ServoSettings DriverSettingsAxis8 = {AXIS8_DRIVER_MODEL, AXIS8_DRIVER_STATUS, AXIS8_SERVO_VELOCITY_MAX, AXIS8_SERVO_ACCELERATION};

    #if AXIS8_DRIVER_MODEL == SERVO_EE
      ServoEE driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_SERVO_DC_PWR_MIN, AXIS8_SERVO_DC_PWR_MAX);
    #elif AXIS8_DRIVER_MODEL == SERVO_PE
      ServoPE driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_SERVO_DC_PWR_MIN, AXIS8_SERVO_DC_PWR_MAX);
    #elif AXIS8_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_SERVO_DC_PWR_MIN, AXIS8_SERVO_DC_PWR_MAX);
    #elif AXIS8_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_SERVO_DC_PWR_MIN, AXIS8_SERVO_DC_PWR_MAX);
    #elif AXIS8_DRIVER_MODEL == SERVO_TMC2209
      ServoTmc2209 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_MOTOR_STEPS_PER_MICRON/AXIS8_STEPS_PER_MICRON, AXIS8_DRIVER_MICROSTEPS, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_DECAY, AXIS8_DRIVER_DECAY_GOTO);
    #elif AXIS8_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_MOTOR_STEPS_PER_MICRON/AXIS8_STEPS_PER_MICRON, AXIS8_DRIVER_MICROSTEPS, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_DECAY, AXIS8_DRIVER_DECAY_GOTO);
    #elif AXIS8_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver8(8, &DriverSettingsAxis8, AXIS8_MOTOR_STEPS_PER_MICRON/AXIS8_STEPS_PER_MICRON);
    #endif

    ServoMotor motor8(8, AXIS8_REVERSE, ((ServoDriver*)&driver8), &filterAxis8, &encAxis8, AXIS8_ENCODER_ORIGIN, AXIS8_ENCODER_REVERSE == ON, &feedbackAxis8, &servoControlAxis8, AXIS8_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS8_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis8 = {AXIS8_M0_PIN, AXIS8_M1_PIN, AXIS8_M2_PIN, AXIS8_M2_ON_STATE, AXIS8_M3_PIN, AXIS8_DECAY_PIN, AXIS8_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis8 = {AXIS8_DRIVER_MODEL, AXIS8_DRIVER_STATUS, AXIS8_DRIVER_MICROSTEPS, AXIS8_DRIVER_MICROSTEPS_GOTO, AXIS8_DRIVER_DECAY, AXIS8_DRIVER_DECAY_GOTO};
    #if AXIS8_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS8_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8);
    #elif AXIS8_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2209 || AXIS8_DRIVER_MODEL == TMC2226
      StepDirTmc2209 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver8(8, &DriverPinsAxis8, &DriverSettingsAxis8, AXIS8_DRIVER_IHOLD, AXIS8_DRIVER_IRUN, AXIS8_DRIVER_IGOTO, AXIS8_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis8 = {AXIS8_STEP_PIN, AXIS8_STEP_STATE, AXIS8_DIR_PIN, AXIS8_ENABLE_PIN, AXIS8_ENABLE_STATE};
    StepDirMotor motor8(8, AXIS8_REVERSE, &StepDirPinsAxis8, ((StepDirDriver*)&driver8));
  #endif

  const AxisPins PinsAxis8 = {AXIS8_SENSE_LIMIT_MIN_PIN, AXIS8_SENSE_HOME_PIN, AXIS8_SENSE_LIMIT_MAX_PIN, {AXIS8_SENSE_HOME, AXIS8_SENSE_HOME_INIT, AXIS8_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS8_SENSE_LIMIT_MIN, AXIS8_SENSE_LIMIT_MAX, AXIS8_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis8 = {AXIS8_STEPS_PER_MICRON, {AXIS8_LIMIT_MIN*1000.0F, AXIS8_LIMIT_MAX*1000.0F}, AXIS8_BACKLASH_RATE};
  Axis axis8(8, &PinsAxis8, &SettingsAxis8, AXIS_MEASURE_MICRONS);
#endif

#if AXIS9_DRIVER_MODEL != OFF

  #ifdef AXIS9_KTECH_PRESENT
    const KTechDriverSettings DriverSettingsAxis9 = {AXIS9_DRIVER_MODEL, AXIS9_DRIVER_STATUS};
    KTechMotor motor9(9, AXIS9_REVERSE, &DriverSettingsAxis9);
  #endif

  #ifdef AXIS9_SERVO_PRESENT
    ServoControl servoControlAxis9;

    #if AXIS9_ENCODER == AB
      Quadrature encAxis9(9, AXIS9_ENCODER_A_PIN, AXIS9_ENCODER_B_PIN);
    #elif AXIS9_ENCODER == AB_ESP32
      QuadratureEsp32 encAxis9(9, AXIS9_ENCODER_A_PIN, AXIS9_ENCODER_B_PIN);
    #elif AXIS9_ENCODER == CW_CCW
      CwCcw encAxis9(9, AXIS9_ENCODER_A_PIN, AXIS9_ENCODER_B_PIN);
    #elif AXIS9_ENCODER == PULSE_DIR
      PulseDir encAxis9(9, AXIS9_ENCODER_A_PIN, AXIS9_ENCODER_B_PIN);
    #elif AXIS9_ENCODER == PULSE_ONLY
      PulseOnly encAxis9(9, AXIS9_ENCODER_A_PIN, &servoControlAxis9.directionHint);
    #elif AXIS9_ENCODER == VIRTUAL
      VirtualEnc encAxis9(9);
    #elif AXIS9_ENCODER == SERIAL_BRIDGE
      SerialBridge encAxis9(9);
    #endif

    #if AXIS9_SERVO_FEEDBACK == PID
      Pid feedbackAxis9(AXIS9_PID_P, AXIS9_PID_I, AXIS9_PID_D);
    #elif AXIS9_SERVO_FEEDBACK == DUAL_PID
      DualPid feedbackAxis9(AXIS9_PID_P, AXIS9_PID_I, AXIS9_PID_D, AXIS9_PID_P_GOTO, AXIS9_PID_I_GOTO, AXIS9_PID_D_GOTO, AXIS9_PID_SENSITIVITY);
    #endif

    #if AXIS9_SERVO_FLTR == KALMAN
      KalmanFilter filterAxis9(AXIS9_SERVO_FLTR_MEAS_U, AXIS9_SERVO_FLTR_VARIANCE);
    #elif AXIS9_SERVO_FLTR == ROLLING
      RollingFilter filterAxis9(AXIS9_SERVO_FLTR_WSIZE);
    #elif AXIS9_SERVO_FLTR == WINDOWING
      WindowingFilter filterAxis9(AXIS9_SERVO_FLTR_WSIZE);
    #elif AXIS9_SERVO_FLTR == OFF
      Filter filterAxis9;
    #endif

    const ServoPins DriverPinsAxis9 = {AXIS9_SERVO_PH1_PIN, AXIS9_SERVO_PH1_STATE, AXIS9_SERVO_PH2_PIN, AXIS9_SERVO_PH2_STATE, AXIS9_ENABLE_PIN, AXIS9_ENABLE_STATE, AXIS9_M0_PIN, AXIS9_M1_PIN, AXIS1_M2_PIN, AXIS9_M3_PIN, AXIS9_FAULT_PIN};
    const ServoSettings DriverSettingsAxis9 = {AXIS9_DRIVER_MODEL, AXIS9_DRIVER_STATUS, AXIS9_SERVO_VELOCITY_MAX, AXIS9_SERVO_ACCELERATION};

    #if AXIS9_DRIVER_MODEL == SERVO_EE
      ServoEE driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_SERVO_DC_PWR_MIN, AXIS9_SERVO_DC_PWR_MAX);
    #elif AXIS9_DRIVER_MODEL == SERVO_PE
      ServoPE driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_SERVO_DC_PWR_MIN, AXIS9_SERVO_DC_PWR_MAX);
    #elif AXIS9_DRIVER_MODEL == SERVO_TMC2130_DC
      ServoTmc2130DC driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_SERVO_DC_PWR_MIN, AXIS9_SERVO_DC_PWR_MAX);
    #elif AXIS9_DRIVER_MODEL == SERVO_TMC5160_DC
      ServoTmc5160DC driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_SERVO_DC_PWR_MIN, AXIS9_SERVO_DC_PWR_MAX);
    #elif AXIS9_DRIVER_MODEL == TMC2209 || AXIS9_DRIVER_MODEL == TMC2226
      ServoTmc2209 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_MOTOR_STEPS_PER_MICRON/AXIS9_STEPS_PER_MICRON, AXIS9_DRIVER_MICROSTEPS, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_DECAY, AXIS9_DRIVER_DECAY_GOTO);
    #elif AXIS9_DRIVER_MODEL == SERVO_TMC5160
      ServoTmc5160 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_MOTOR_STEPS_PER_MICRON/AXIS9_STEPS_PER_MICRON, AXIS9_DRIVER_MICROSTEPS, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_DECAY, AXIS9_DRIVER_DECAY_GOTO);
    #elif AXIS9_DRIVER_MODEL == SERVO_KTECH
      ServoKTech driver9(9, &DriverSettingsAxis9, AXIS9_MOTOR_STEPS_PER_MICRON/AXIS9_STEPS_PER_MICRON);
    #endif

    ServoMotor motor9(9, AXIS9_REVERSE, ((ServoDriver*)&driver9), &filterAxis9, &encAxis9, AXIS9_ENCODER_ORIGIN, AXIS9_ENCODER_REVERSE == ON, &feedbackAxis9, &servoControlAxis9, AXIS9_SYNC_THRESHOLD);
  #endif

  #ifdef AXIS9_STEP_DIR_PRESENT
    const StepDirDriverPins DriverPinsAxis9 = {AXIS9_M0_PIN, AXIS9_M1_PIN, AXIS9_M2_PIN, AXIS9_M2_ON_STATE, AXIS9_M3_PIN, AXIS9_DECAY_PIN, AXIS9_FAULT_PIN};
    const StepDirDriverSettings DriverSettingsAxis9 = {AXIS9_DRIVER_MODEL, AXIS9_DRIVER_STATUS, AXIS9_DRIVER_MICROSTEPS, AXIS9_DRIVER_MICROSTEPS_GOTO, AXIS9_DRIVER_DECAY, AXIS9_DRIVER_DECAY_GOTO};
    #if AXIS9_DRIVER_MODEL >= STEP_DIR_DRIVER_FIRST && AXIS9_DRIVER_MODEL < TMC_DRIVER_FIRST
      StepDirGeneric driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9);
    #elif AXIS8_DRIVER_MODEL == TMC2130
      StepDirTmc2130 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2160
      StepDirTmc2160 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2208
      StepDirTmc2208 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2209
      StepDirTmc2209 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC2660
      StepDirTmc2660 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC5160
      StepDirTmc5160 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #elif AXIS8_DRIVER_MODEL == TMC5161
      StepDirTmc5161 driver9(9, &DriverPinsAxis9, &DriverSettingsAxis9, AXIS9_DRIVER_IHOLD, AXIS9_DRIVER_IRUN, AXIS9_DRIVER_IGOTO, AXIS9_DRIVER_INTPOL);
    #endif

    const StepDirPins StepDirPinsAxis9 = {AXIS9_STEP_PIN, AXIS9_STEP_STATE, AXIS9_DIR_PIN, AXIS9_ENABLE_PIN, AXIS9_ENABLE_STATE};
    StepDirMotor motor9(9, AXIS9_REVERSE, &StepDirPinsAxis9, ((StepDirDriver*)&driver9));
  #endif

  const AxisPins PinsAxis9 = {AXIS9_SENSE_LIMIT_MIN_PIN, AXIS9_SENSE_HOME_PIN, AXIS9_SENSE_LIMIT_MAX_PIN, {AXIS9_SENSE_HOME, AXIS9_SENSE_HOME_INIT, AXIS9_SENSE_HOME_DIST_LIMIT*1000.0F, AXIS9_SENSE_LIMIT_MIN, AXIS9_SENSE_LIMIT_MAX, AXIS9_SENSE_LIMIT_INIT}};
  const AxisSettings SettingsAxis9 = {AXIS9_STEPS_PER_MICRON, {AXIS9_LIMIT_MIN*1000.0F, AXIS9_LIMIT_MAX*1000.0F}, AXIS9_BACKLASH_RATE};
  Axis axis9(9, &PinsAxis9, &SettingsAxis9, AXIS_MEASURE_MICRONS);
#endif

#endif
